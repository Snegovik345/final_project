@bot.message_handler(commands=['quiz'])
def start_quiz(message):
    bot.send_message(message.chat.id, "üåç –≠–∫–æ-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ (5 –≤–æ–ø—Ä–æ—Å–æ–≤):")
    msg = bot.send_message(message.chat.id, quiz_questions[0])
    bot.register_next_step_handler(msg, process_answer1)


def process_answer1(message):
    check_answer(message, 0, quiz_questions[1], process_answer2)

def process_answer2(message):
    check_answer(message, 1, quiz_questions[2], process_answer3)

def process_answer3(message):
    check_answer(message, 2, quiz_questions[3], process_answer4)

def process_answer4(message):
    check_answer(message, 3, quiz_questions[4], process_answer5)

def process_answer5(message):
    if message.text.lower() == correct_answers[4].lower():
        bot.send_message(message.chat.id, "‚úÖ –í–µ—Ä–Ω–æ!\n\n–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_answers[4]}\n\n–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def check_answer(message, answer_index, next_question, next_handler):
    if message.text.lower() == correct_answers[answer_index].lower():
        bot.send_message(message.chat.id, "‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_answers[answer_index]}")
    
    msg = bot.send_message(message.chat.id, next_question)
    bot.register_next_step_handler(msg, next_handler)



@bot.message_handler(commands=["tip"])
def send_random_tip(message):
    tips = random.choice(eco_tips)
    bot.reply_to(message, f"üåé *–≠–∫–æ—Å–æ–≤–µ—Ç –¥–Ω—è:*\n\n{tips}", parse_mode="Markdown")



@bot.message_handler(commands=["challenge"])
def send_random_challenge(message):
    challenges = random.choice(eco_challenge)
    bot.reply_to(message, f"‚ôªÔ∏è *–¢–≤–æ–π —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —á–µ–ª–ª–µ–Ω–¥–∂:*\n\n{challenges}", parse_mode="Markdown")


@bot.message_handler(commands=['meme'])
def send_meme(message):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 8
    meme_number = random.randint(1, 8)
    meme_filename = f'—ç–∫–æ–º–µ–º–∞—Å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞_{meme_number}.jpg'  
    try:
        with open(meme_filename, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    except FileNotFoundError:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")



@bot.message_handler(commands=['recycle'])
@bot.message_handler(func=lambda msg: msg.text.lower().startswith('/recycle'))
def handle_recycle(message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        parts = message.text.split(maxsplit=1)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        if len(parts) < 2:
            items_list = "\n".join([f"‚Ä¢ {item}" for item in recycle_guide.keys()])
            bot.send_message(message.chat.id, 
                          "‚ôªÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n/recycle <–ø—Ä–µ–¥–º–µ—Ç>\n\n"
                          f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n{items_list}")
            return
            
        item = parts[1].lower().strip()
        
        # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
        if item in recycle_guide:
            response = f"‚ôªÔ∏è {item.capitalize()}:\n\n{recycle_guide[item]}"
        else:
            response = f"‚ùå –ü—Ä–µ–¥–º–µ—Ç '{item}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
            response += "\n".join([f"‚Ä¢ {key}" for key in recycle_guide.keys()])
            
        bot.send_message(message.chat.id, response)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")




    

bot.polling()
